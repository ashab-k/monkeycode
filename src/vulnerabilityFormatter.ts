import { OSVVulnerability } from "./types";

export class VulnerabilityFormatter {
  public static formatVulnerabilityDetails(
    vuln: OSVVulnerability,
    severityDetails: string
  ): string {
    const parts: string[] = [];

    // Add severity information
    if (severityDetails) {
      parts.push("## Severity Information\n" + severityDetails + "\n");
    }

    // Add summary if available
    if (vuln.summary) {
      parts.push(`## Summary\n${vuln.summary}\n`);
    }

    // Add details if available
    if (vuln.details) {
      parts.push(`## Details\n${vuln.details}\n`);
    }

    // Add affected versions
    if (vuln.ranges && vuln.ranges.length > 0) {
      parts.push("## Affected Versions\n");
      vuln.ranges.forEach(range => {
        if (range.type === "SEMVER") {
          const events = range.events
            .filter(e => e.introduced || e.fixed || e.last_affected)
            .map(e => {
              if (e.introduced) return `Introduced in: ${e.introduced}`;
              if (e.fixed) return `Fixed in: ${e.fixed}`;
              if (e.last_affected) return `Last affected: ${e.last_affected}`;
              return null;
            })
            .filter(Boolean);
          if (events.length > 0) {
            parts.push(events.join("\n") + "\n");
          }
        }
      });
    }

    // Add references
    parts.push(this.formatReferences(vuln));

    return parts.join("\n");
  }

  private static formatReferences(vuln: OSVVulnerability): string {
    if (!vuln.aliases || vuln.aliases.length === 0) {
      return "";
    }

    const parts: string[] = ["## References\n"];
    
    vuln.aliases.forEach(alias => {
      if (alias.startsWith("CVE-")) {
        parts.push(`- [${alias}](https://nvd.nist.gov/vuln/detail/${alias})`);
      } else if (alias.startsWith("GHSA-")) {
        parts.push(`- [${alias}](https://github.com/advisories/${alias})`);
      } else if (alias.startsWith("GO-")) {
        parts.push(`- [${alias}](https://pkg.go.dev/vuln/${alias})`);
      } else {
        parts.push(`- ${alias}`);
      }
    });

    return parts.join("\n") + "\n";
  }
} 